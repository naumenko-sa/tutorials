# recalculate burden using the filtered report
for(sample in samples){
zygosity_column_name <- paste0("Zygosity.", sample)
burden_column_name <- paste0("Burden.", sample)
t <- subset(filtered_report,
get(zygosity_column_name) == 'Hom' | get(zygosity_column_name) == 'Het',
select = c("Gene", zygosity_column_name))
df_burden <- count(t, 'Gene')
colnames(df_burden)[2] <- burden_column_name
filtered_report[,burden_column_name] <- NULL
filtered_report <- merge(filtered_report, df_burden, all.x = T)
filtered_report[,burden_column_name][is.na(variants[, burden_column_name])] <- 0
}
df_burden <- count(t$Gene)
df_burden
df_burden <- count(t,t$Gene)
?count
count(t)
setwd()
setwd("~")
samples
sample
zygosity_column_name <- paste0("Zygosity.", sample)
burden_column_name <- paste0("Burden.", sample)
zygosity_column_name
burden_column_name
t <- subset(filtered_report,
get(zygosity_column_name) == 'Hom' | get(zygosity_column_name) == 'Het',
select = c("Gene", zygosity_column_name))
filtered_report <- subset(full_report,
Quality > 1000 & Gnomad_af_popmax < 0.005 & Frequency_in_C4R < 6 & max_alt >=20,
select = c("Position", "GNOMAD_Link", "Ref", "Alt", "Gene", paste0("Zygosity.", samples),
paste0("Burden.",samples),
"Variation", "Info", "Refseq_change", "Omim_gene_description", "Omim_inheritance",
"Orphanet", "Clinvar", "Frequency_in_C4R",
"Gnomad_af_popmax", "Gnomad_af", "Gnomad_ac", "Gnomad_hom",
"Sift_score", "Polyphen_score", "Cadd_score", "Vest3_score", "Revel_score",
"Imprinting_status", "Pseudoautosomal")
)
View(filtered_report)
t <- subset(filtered_report,
get(zygosity_column_name) == 'Hom' | get(zygosity_column_name) == 'Het',
select = c("Gene", zygosity_column_name))
df_burden <- count(t, "Gene")
?count
library(stringr)
library(data.table)
library(plyr)
?count
df_burden <- count(t, "Gene")
colnames(df_burden)[2] <- burden_column_name
filtered_report[,burden_column_name] <- NULL
filtered_report <- merge(filtered_report, df_burden, all.x = T)
filtered_report[,burden_column_name][is.na(variants[, burden_column_name])] <- 0
filtered_report[,burden_column_name][is.na(filtered_report[, burden_column_name])] <- 0
filtered_report <- subset(full_report,
Quality > 1000 & Gnomad_af_popmax < 0.005 & Frequency_in_C4R < 6 & max_alt >=20,
select = c("Position", "GNOMAD_Link", "Ref", "Alt", "Gene", paste0("Zygosity.", samples),
paste0("Burden.",samples),
"Variation", "Info", "Refseq_change", "Omim_gene_description", "Omim_inheritance",
"Orphanet", "Clinvar", "Frequency_in_C4R",
"Gnomad_af_popmax", "Gnomad_af", "Gnomad_ac", "Gnomad_hom",
"Sift_score", "Polyphen_score", "Cadd_score", "Vest3_score", "Revel_score",
"Imprinting_status", "Pseudoautosomal")
)
# recalculate burden using the filtered report
for(sample in samples){
zygosity_column_name <- paste0("Zygosity.", sample)
burden_column_name <- paste0("Burden.", sample)
t <- subset(filtered_report,
get(zygosity_column_name) == 'Hom' | get(zygosity_column_name) == 'Het',
select = c("Gene", zygosity_column_name))
# count is from plyr
df_burden <- count(t, "Gene")
colnames(df_burden)[2] <- burden_column_name
filtered_report[,burden_column_name] <- NULL
filtered_report <- merge(filtered_report, df_burden, all.x = T)
filtered_report[,burden_column_name][is.na(filtered_report[, burden_column_name])] <- 0
}
#order columns
filtered_report <- filtered_report[c("Position", "GNOMAD_Link", "Ref", "Alt", "Gene", paste0("Zygosity.", samples),
paste0("Burden.", samples),
"Variation", "Info", "Refseq_change", "Omim_gene_description", "Omim_inheritance",
"Orphanet", "Clinvar", "Frequency_in_C4R",
"Gnomad_af_popmax", "Gnomad_af", "Gnomad_ac", "Gnomad_hom",
"Sift_score", "Polyphen_score", "Cadd_score", "Vest3_score", "Revel_score",
"Imprinting_status", "Pseudoautosomal")]
getwd()
write.csv(filtered_report, paste0(project, ".wes.clinical.", Sys.Date(), ".csv"), row.names = F)
?count
install.packages("tidyverse")
install.package("RColorBrewer")
install.packages("RColorBrewer")
library(tidyverse)
library(RColorBrewer)
source("~/crt/crt.utils.R")
setwd("~/Desktop/work/patricia")
library(tidyverse)
library(edgeR)
ensembl_w_description <- read.delim2("~/cre/data/ensembl_w_description.txt", stringsAsFactors = F)
View(ensembl_w_description)
source("~/crt/crt.utils.R")
counts <- read_csv("raw_counts.csv")
# remove suffix
counts$Ensembl_gene_id <- str_replace(counts$Ensembl_gene_id,"\\.\\d+","")
sample_names <- tibble(sample_name = colnames(counts)) %>% tail(-1)
protein_coding_genes <- read.csv("protein_coding_genes.list", sep="", stringsAsFactors=F)
counts <- inner_join(counts, protein_coding_genes, by = c("Ensembl_gene_id" = "ENS_GENE_ID")) %>%
select(Ensembl_gene_id, HCGM_WT, WG2, WG3, HCGM_K27M, KG2, KG3)
counts <- column_to_rownames(counts,var="Ensembl_gene_id")
samples <- colnames(counts)
n_samples <- length(samples)
group <- factor(c(rep(1, n_samples/2), rep(2, n_samples/2)))
filter <- 0.5
protein_coding_genes <- read.csv("protein_coding_genes.list", sep="", stringsAsFactors=F)
counts <- inner_join(counts, protein_coding_genes, by = c("Ensembl_gene_id" = "ENS_GENE_ID")) %>%
select(Ensembl_gene_id, WG2, WG3, KG2, KG3)
counts <- read_csv("raw_counts.csv")
# remove suffix
counts$Ensembl_gene_id <- str_replace(counts$Ensembl_gene_id,"\\.\\d+","")
sample_names <- tibble(sample_name = colnames(counts)) %>% tail(-1)
protein_coding_genes <- read.csv("protein_coding_genes.list", sep="", stringsAsFactors=F)
counts <- inner_join(counts, protein_coding_genes, by = c("Ensembl_gene_id" = "ENS_GENE_ID")) %>%
select(Ensembl_gene_id, WG2, WG3, KG2, KG3)
counts <- column_to_rownames(counts,var="Ensembl_gene_id")
samples <- colnames(counts)
n_samples <- length(samples)
group <- factor(c(rep(1, n_samples/2), rep(2, n_samples/2)))
filter <- 0.5
gene_lengths <- read.delim("~/crt/gene_lengths.txt", stringsAsFactors = F)
gene_lengths <- gene_lengths[gene_lengths$ENSEMBL_GENE_ID %in% row.names(counts),]
gene_lengths <- gene_lengths[order(gene_lengths$ENSEMBL_GENE_ID),]
gene_lengths <- merge(gene_lengths, ensembl_w_description, by.x = "ENSEMBL_GENE_ID",
by.y = "row.names", all.x = T, all.y = F)
counts <- counts[row.names(counts) %in% gene_lengths$ENSEMBL_GENE_ID,]
y <- DGEList(counts = counts,
group = group,
genes = gene_lengths,
remove.zeros = T)
rpkm.counts <- rpkm(y)
max_genes <- nrow(counts)
logcpm <- cpm(counts, prior.count = 1, log = T)
t_cpm <- cpm(counts, prior.count = 1, log = F)
logcpm <- logcpm[,samples]
t_cpm <- t_cpm[,samples]
plotMDS(y)
keep <- rowSums(cpm(y)>filter) >= n_samples/2
y <- y[keep,, keep.lib.sizes = F]
#normalization for RNA composition (2.7.3)
y <- calcNormFactors(y)
plotMDS(y,las=1)
design <- model.matrix(~group)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit)
prefix <- "2019-03-05"
efilename <- paste0(prefix, ".csv")
de_results <- topTags(lrt, n = max_genes, sort.by = "PValue", p.value = 1, adjust.method = "fdr")
de_results$table$ensembl_gene_id <- NULL
de_results$table$external_gene_name <- NULL
de_results$table$Gene_description <- NULL
de_results$table$ENSEMBL_GENE_ID <- NULL
de_results$table <- merge(de_results$table, rpkm.counts, by.x = "row.names", by.y = "row.names",
all.x = T, all.y = F)
colnames(de_results$table)[1] = "ensembl_gene_id"
write.csv(de_results$table, efilename, quote = T, row.names = F)
de_results = read.csv(efilename, stringsAsFactors = F)
s_rownames = row.names(de_results)
de_results = merge(de_results, ensembl_w_description,
by.x = "ensembl_gene_id", by.y = "ensembl_gene_id", all.x = T)
View(de_results)
de_results = read.csv(efilename, stringsAsFactors = F)
head(ensembl_w_description)
de_results = merge(de_results, ensembl_w_description,
by.x = "ensembl_gene_id", by.y = "row.names", all.x = T)
de_results <- de_results[order(abs(de_results$logFC),decreasing = T),]
de_results <- de_results[c("ensembl_gene_id", "external_gene_name", "Gene_description", "Length",
"logFC", "logCPM", "LR", "PValue", "FDR", samples)]
write.csv(de_results, efilename, quote = T, row.names = F)
prepare_file_4gsea(counts, samples, prefix)
de_results = read.csv(efilename, stringsAsFactors = F)
de_results = merge(de_results, ensembl_w_description,
by.x = "ensembl_gene_id", by.y = "row.names", all.x = T)
de_results <- de_results[c("ensembl_gene_id", "external_gene_name", "Gene_description", "Length",
"logFC", "logCPM", "LR", "PValue", "FDR", samples)]
de_results = read.csv(efilename, stringsAsFactors = F)
de_results = merge(de_results, ensembl_w_description,
by.x = "ensembl_gene_id", by.y = "row.names", all.x = T)
de_results <- de_results[c("ensembl_gene_id", "external_gene_name", "Gene_description", "Length",
"logFC", "logCPM", "LR", "PValue", "FDR", samples)]
View(de_results)
de_results = read.csv(efilename, stringsAsFactors = F)
View(de_results)
prefix <- "2019-03-05"
efilename <- paste0(prefix, ".csv")
de_results <- topTags(lrt, n = max_genes, sort.by = "PValue", p.value = 1, adjust.method = "fdr")
de_results$table$ensembl_gene_id <- NULL
de_results$table$external_gene_name <- NULL
de_results$table$Gene_description <- NULL
de_results$table$ENSEMBL_GENE_ID <- NULL
de_results$table <- merge(de_results$table, rpkm.counts, by.x = "row.names", by.y = "row.names",
all.x = T, all.y = F)
colnames(de_results$table)[1] = "ensembl_gene_id"
write.csv(de_results$table, efilename, quote = T, row.names = F)
de_results = read.csv(efilename, stringsAsFactors = F)
de_results = merge(de_results, ensembl_w_description,
by.x = "ensembl_gene_id", by.y = "row.names", all.x = T)
de_results <- de_results[c("ensembl_gene_id", "external_gene_name", "Gene_description", "Length",
"logFC", "logCPM", "LR", "PValue", "FDR", samples)]
de_results <- de_results[de_results$FDR < 0.05,]
de_results <- de_results[abs(de_results$logFC)>=2,]
de_results <- de_results[order(de_results$logFC),]
write.csv(de_results, efilename, quote = T, row.names = F)
prepare_file_4gsea(counts, samples, prefix)
counts <- read_csv("raw_counts.csv")
# remove suffix
counts$Ensembl_gene_id <- str_replace(counts$Ensembl_gene_id,"\\.\\d+","")
sample_names <- tibble(sample_name = colnames(counts)) %>% tail(-1)
protein_coding_genes <- read.csv("protein_coding_genes.list", sep="", stringsAsFactors=F)
counts <- inner_join(counts, protein_coding_genes, by = c("Ensembl_gene_id" = "ENS_GENE_ID")) %>%
select(Ensembl_gene_id, HCGM_WT, WG2, WG3, HCGM_K27M, KG2, KG3)
counts <- column_to_rownames(counts,var="Ensembl_gene_id")
samples <- colnames(counts)
n_samples <- length(samples)
group <- factor(c(rep(1, n_samples/2), rep(2, n_samples/2)))
filter <- 0.5
gene_lengths <- read.delim("~/crt/gene_lengths.txt", stringsAsFactors = F)
gene_lengths <- gene_lengths[gene_lengths$ENSEMBL_GENE_ID %in% row.names(counts),]
gene_lengths <- gene_lengths[order(gene_lengths$ENSEMBL_GENE_ID),]
gene_lengths <- merge(gene_lengths, ensembl_w_description, by.x = "ENSEMBL_GENE_ID",
by.y = "row.names", all.x = T, all.y = F)
counts <- counts[row.names(counts) %in% gene_lengths$ENSEMBL_GENE_ID,]
y <- DGEList(counts = counts,
group = group,
genes = gene_lengths,
remove.zeros = T)
rpkm.counts <- rpkm(y)
max_genes <- nrow(counts)
logcpm <- cpm(counts, prior.count = 1, log = T)
t_cpm <- cpm(counts, prior.count = 1, log = F)
logcpm <- logcpm[,samples]
t_cpm <- t_cpm[,samples]
plotMDS(y)
keep <- rowSums(cpm(y)>filter) >= n_samples/2
y <- y[keep,, keep.lib.sizes = F]
#normalization for RNA composition (2.7.3)
y <- calcNormFactors(y)
plotMDS(y,las=1)
design <- model.matrix(~group)
y <- estimateDisp(y,design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit)
prefix <- "2019-03-05"
efilename <- paste0(prefix, ".csv")
de_results <- topTags(lrt, n = max_genes, sort.by = "PValue", p.value = 1, adjust.method = "fdr")
de_results$table$ensembl_gene_id <- NULL
de_results$table$external_gene_name <- NULL
de_results$table$Gene_description <- NULL
de_results$table$ENSEMBL_GENE_ID <- NULL
de_results$table <- merge(de_results$table, rpkm.counts, by.x = "row.names", by.y = "row.names",
all.x = T, all.y = F)
colnames(de_results$table)[1] = "ensembl_gene_id"
write.csv(de_results$table, efilename, quote = T, row.names = F)
de_results = read.csv(efilename, stringsAsFactors = F)
de_results = merge(de_results, ensembl_w_description,
by.x = "ensembl_gene_id", by.y = "row.names", all.x = T)
de_results <- de_results[c("ensembl_gene_id", "external_gene_name", "Gene_description", "Length",
"logFC", "logCPM", "LR", "PValue", "FDR", samples)]
de_results <- de_results[de_results$FDR < 0.05,]
de_results <- de_results[abs(de_results$logFC)>=2,]
de_results <- de_results[order(de_results$logFC),]
write.csv(de_results, efilename, quote = T, row.names = F)
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname=dbname)
library(RSQLite)
library(plyr)
con <- dbConnect(RSQLite::SQLite(), dbname=dbname)
dbListTables(con)
library(RSQLite)
install.packages("RSQLite")
setwd("~/Desktop/teaching_n_learning/tutorials/2016-10-30_gemini_R/")
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname = dbname)
dbListTables(con)
qrySample <- "select name from samples"
samples <- dbGetQuery(con, qrySample)
sample <- samples[[1]]
qryReport <- "select
v.ref as Ref,
v.alt as Alt,
v.chrom as Chrom,
v.start+1  as Pos,
v.impact as Variation,
v.depth as Depth,
v.qual_depth as Qual_depth,
v.gene as Gene,
g.ensembl_gene_id as Ensembl_gene_id,
v.clinvar_disease_name as Clinvar,
v.transcript as Ensembl_transcript_id,
v.aa_length as AA_position,
v.exon as Exon,
v.pfam_domain as Pfam_domain,
v.rs_ids as rsIDs,
v.aaf_1kg_all as Maf_1000g,
v.aaf_exac_all as Exac_maf,
v.max_aaf_all as Maf_all,
v.exac_num_het as Exac_het,
v.exac_num_hom_alt as Exac_hom_alt,
v.sift_score as Sift_score,
v.polyphen_score as Polyphen_score,
v.cadd_scaled as Cadd_score,
v.aa_change as AA_change
from variants v, gene_detailed g
where v.transcript=g.transcript and v.gene=g.gene";
variants <- dbGetQuery(con, qryReport)
colnames(variants)
variants_rare_missense <- subset(variants, Variation == 'missense_variant' & Maf_all < 0.01)
variants_potentially_deleterious <- subset(variants_rare_missense, Polyphen_score > 0.9)
#explore variation
effectscount(variants,'Variation')
#explore variation
effects <- count(variants,'Variation')
op <- par(mar = c(15,4,4,2) + 0.1)
barplot(effects$freq,names.arg = effects$Variation,las=2)
par(op)
#remove intronic variants
effects_no_intronic <- effects[effects$Variation != 'intron_variant',]
op <- par(mar = c(15,4,4,2) + 0.1)
barplot(effects.no_intronic$freq, names.arg = effects.no_intronic$Variation, las=2)
barplot(effects_no_intronic$freq, names.arg = effects.no_intronic$Variation, las=2)
barplot(effects_no_intronic$freq, names.arg = effects_no_intronic$Variation, las=2)
par(op)
qryGene_summary <- "select * from gene_summary"
gene_summary <- dbGetQuery(con,qryGene_summary)
qryAllTranscriptsAffected = "select v.chrom, v.start+1,v.end, v.ref, v.alt,
v.gene,vi.gene,
v.transcript,
vi.transcript,
vi.aa_change,
vi.aa_length
from variant_impacts vi, variants v
where vi.variant_id=v.variant_id and
v.is_coding = 1"
all_coding_effects = dbGetQuery(con,qryAllTranscriptsAffected)
View(all_coding_effects)
dbDisconnect(con)
library(DBI)
library(tidyverse)
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname = dbname)
dbListTables(con)
qrySample <- "select name from samples"
samples <- dbGetQuery(con, qrySample)
sample <- samples[[1]]
sample
samples
qryReport <- "select
v.ref as Ref,
v.alt as Alt,
v.chrom as Chrom,
v.start+1  as Pos,
v.impact as Variation,
v.depth as Depth,
v.qual_depth as Qual_depth,
v.gene as Gene,
g.ensembl_gene_id as Ensembl_gene_id,
v.clinvar_disease_name as Clinvar,
v.transcript as Ensembl_transcript_id,
v.aa_length as AA_position,
v.exon as Exon,
v.pfam_domain as Pfam_domain,
v.rs_ids as rsIDs,
v.aaf_1kg_all as Maf_1000g,
v.aaf_exac_all as Exac_maf,
v.max_aaf_all as Maf_all,
v.exac_num_het as Exac_het,
v.exac_num_hom_alt as Exac_hom_alt,
v.sift_score as Sift_score,
v.polyphen_score as Polyphen_score,
v.cadd_scaled as Cadd_score,
v.aa_change as AA_change
from variants v, gene_detailed g
where v.transcript=g.transcript and v.gene=g.gene";
variants <- dbGetQuery(con, qryReport)
View(variants)
?dbGetQuery
variants <- as_tibble(dbGetQuery(con, qryReport))
variants_rare_missense <- filter(variants, Variation == "missense_variant",Maf_all < 0.01)
variants_potentially_deleterious <- filter(variants_rare_missense, Polyphen_score > 0.9)
?count
#explore variation
effects <- count(variants,'Variation')
op <- par(mar = c(15,4,4,2) + 0.1)
barplot(effects$freq, names.arg = effects$Variation, las=2)
par(op)
# additional information
# gene descriptions
gene_descriptions <- read_tsv("ensembl_w_description.txt")
variants <- left_join(variants, gene_descriptions, by = c(Ensembl_gene_id, ensembl_gene_id))
variants <- left_join(variants, gene_descriptions, by = c("Ensembl_gene_id", "ensembl_gene_id"))
variants <- left_join(variants, gene_descriptions, by = c("Ensembl_gene_id" = "ensembl_gene_id"))
View(variants)
# ftp://ftp.broadinstitute.org/pub/ExAC_release/release0.3.1/functional_gene_constraint/README_fordist_cleaned_exac_r03_z_data_pLI_2016_01_13.txt
exac_scores <- read_tsv("exac_scores.txt")
variants <- left_join(variants, exac_scores, by = c("gene"))
# ftp://ftp.broadinstitute.org/pub/ExAC_release/release0.3.1/functional_gene_constraint/README_fordist_cleaned_exac_r03_z_data_pLI_2016_01_13.txt
exac_scores <- read_tsv("exac_scores.txt")
variants <- left_join(variants, exac_scores, by = c("gene"))
colnames(variants)
qryAllTranscriptsAffected <- "select v.chrom,
v.start+1,
v.end,
v.ref,
v.alt,
v.gene,
vi.gene,
v.transcript,
vi.transcript,
vi.aa_change,
vi.aa_length
from
variant_impacts vi,
variants v
where
vi.variant_id = v.variant_id and
v.is_coding = 1"
all_coding_effects = dbGetQuery(con,qryAllTranscriptsAffected)
dbDisconnect(con)
View(variants_potentially_deleterious)
samples
qryReport <- "select
v.ref as Ref,
v.alt as Alt,
v.chrom as Chrom,
v.start+1  as Pos,
v.impact as Variation,
v.depth as Depth,
v.qual_depth as Qual_depth,
v.gene as Gene,
g.ensembl_gene_id as Ensembl_gene_id,
v.clinvar_disease_name as Clinvar,
v.transcript as Ensembl_transcript_id,
v.aa_length as AA_position,
v.exon as Exon,
v.pfam_domain as Pfam_domain,
v.rs_ids as rsIDs,
v.aaf_1kg_all as Maf_1000g,
v.aaf_exac_all as Exac_maf,
v.max_aaf_all as Maf_all,
v.exac_num_het as Exac_het,
v.exac_num_hom_alt as Exac_hom_alt,
v.sift_score as Sift_score,
v.polyphen_score as Polyphen_score,
v.cadd_scaled as Cadd_score,
v.aa_change as AA_change,
gts.NA12878-1
from variants v, gene_detailed g
where v.transcript=g.transcript and v.gene=g.gene";
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname = dbname)
dbListTables(con)
setwd("~/Desktop/teaching_n_learning/tutorials/2016-10-30_gemini_R/")
library(DBI)
library(tidyverse)
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname = dbname)
dbListTables(con)
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname = dbname)
dbListTables(con)
qrySample <- "select name from samples"
samples <- dbGetQuery(con, qrySample)
sample <- samples[[1]]
setwd("~/Desktop/teaching_n_learning/tutorials/2016-10-30_gemini_R/")
dbname <- "gemini.db"
con <- dbConnect(RSQLite::SQLite(), dbname = dbname)
dbListTables(con)
qrySample <- "select name from samples"
samples <- dbGetQuery(con, qrySample)
sample <- samples[[1]]
qryReport <- "select
v.ref as Ref,
v.alt as Alt,
v.chrom as Chrom,
v.start+1  as Pos,
v.impact as Variation,
v.depth as Depth,
v.qual_depth as Qual_depth,
v.gene as Gene,
g.ensembl_gene_id as Ensembl_gene_id,
v.clinvar_disease_name as Clinvar,
v.transcript as Ensembl_transcript_id,
v.aa_length as AA_position,
v.exon as Exon,
v.pfam_domain as Pfam_domain,
v.rs_ids as rsIDs,
v.aaf_1kg_all as Maf_1000g,
v.aaf_exac_all as Exac_maf,
v.max_aaf_all as Maf_all,
v.exac_num_het as Exac_het,
v.exac_num_hom_alt as Exac_hom_alt,
v.sift_score as Sift_score,
v.polyphen_score as Polyphen_score,
v.cadd_scaled as Cadd_score,
v.aa_change as AA_change,
gts.NA12878-1
from variants v, gene_detailed g
where v.transcript=g.transcript and v.gene=g.gene";
variants <- as_tibble(dbGetQuery(con, qryReport))
dbListTables(con)
dbListFields(con, "variants")
tidyverse_update()
